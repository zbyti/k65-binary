

inline c3c_px1 { gp0=a=px1 pf2=a=px2 gp1=a=px4 }	// 18
inline c3c_px2 { pf2=a=px3 }						// 6
inline c3c_py1 { gp0=a=py1 pf2=a=py2 gp1=a=py4 }	// 18
inline c3c_py2 { pf2=a=py3 }						// 6

inline c3c_linex1 { c3c_px1 a=frambuff,y a&0x3F  x=a py1=a=Tex1,x py2=a=Tex2,x *2 c3c_px2 }		// 18+4+2+2+7+7+2+6 = 48
inline c3c_linex2 { c3c_px1 a=frambuff,y a>> a>> x=a py3=a=Tex3,x py4=a=Tex4,x    c3c_px2 }
inline c3c_linex3 { c3c_px1 a=frambuff,y *32									  c3c_px2 }
inline c3c_liney1 { c3c_py1 a=frambuff,y a&0x3F  x=a px1=a=Tex1,x px2=a=Tex2,x *2 c3c_py2 }
inline c3c_liney2 { c3c_py1 a=frambuff,y a>> a>> x=a px3=a=Tex3,x px4=a=Tex4,x    c3c_py2 }
inline c3c_liney3 { c3c_py1 a=frambuff,y *32									  c3c_py2 }

inline c3c_bg { a=c3c_col1 y?c3c_split <0{ a=c3c_col2 } cbg=a }

func cube3_core {

	// run
	a=0xFF pf0=a pf1=a pf2=a gp0=a gp1=a
		   px1=a px2=a px3=a px4=a
	cbg=a=15

	wsync hp0=a=0xD0 hp1=a=0x00 *22 rp0=a *10 rp1=a
	wsync hmove=a
	a=0 cp0=a cp1=a cpf=a
	a=7 ns0=a ns1=a
	rep1=a=8

	wsync
	nocross {

		x=0x15
		y=63
		c3c_repeat:

			wsync c3c_linex1 c3c_bg
			wsync c3c_linex2 c3c_bg
			y--

			wsync c3c_liney1 c3c_bg
			wsync c3c_liney2 c3c_bg
			y--
			<0 goto c3c_end

		goto c3c_repeat
		c3c_end:


		// final lines
		y=2
		{
			c3c_px1
			*36
			c3c_px2
			y--
		}!=
	}
	wsync
	a=0 cbg=a cpf=a pf1=a pf2=a gp0=a gp1=a rep1=a
}


inline fast_div {
	// input:
	//		tmp1	- value
	//		tmp2	- divider
	//
	// output:
	//		tmp1	- result
	//		A		- remainder
	//		tmp2	- not modified
	a=0 c-
	tmp1<<< a<<< a?tmp2 >={ a-tmp2 }
	tmp1<<< a<<< a?tmp2 >={ a-tmp2 }
	tmp1<<< a<<< a?tmp2 >={ a-tmp2 }
	tmp1<<< a<<< a?tmp2 >={ a-tmp2 }
	tmp1<<< a<<< a?tmp2 >={ a-tmp2 }
	tmp1<<< a<<< a?tmp2 >={ a-tmp2 }
	tmp1<<< a<<< a?tmp2 >={ a-tmp2 }
	tmp1<<< a<<< a?tmp2 >={ a-tmp2 }
	tmp1<<<
}

func c3_fastline {
	// input:
	//		tmp1	- X delta
	//		tmp2	- Y delta
	//		tmp3	- start X
	//		tmp4	- start Y

	a=tmp2
	<0 goto c3fl_end

	a=tmp1
	>=0 {
		fast_div
		a=tmp3			// a = X position
		y=tmp2			// y - Y counter
		x=tmp4			// x - Y position
		y--
		>=0 {
			nocross {
				frambuff,x=y
				c- a+tmp1 <{ frambuff,x++ }
				x++
				y--
			}>=0
		}
	}

	c3fl_end:
}

data Cube3SineX {
	align 128
	for x=0..127 eval [cos(x/128*2*pi)*127+128]
}

data Cube3SineY {
	align 128
	for x=0..127 eval [sin(x/128*2*pi)*31+32]
}

func c3_fastcube {
	// input:
	//		tmp5	- angle
	a=tmp5 a&0x7F x=a
	a=Cube3SineX,x tmp6=a					// X2
	a=Cube3SineY,x tmp7=a					// Y2
	a=x c- a+0x20 a&0x7F x=a tmp5=a
	a=Cube3SineX,x tmp3=a c+ a-tmp6 tmp1=a	// X1
	a=Cube3SineY,x tmp4=a c+ a-tmp7 tmp2=a	// Y1
	c3_fastline

	a=tmp5 c- a+0x40 a&0x7F x=a
	tmp3=a=tmp6
	tmp4=a=tmp7
	a=Cube3SineX,x c+ a-tmp3 tmp1=a			// X3
	a=Cube3SineY,x c+ a-tmp4 tmp2=a			// Y3
	//c3_fastline

}

data CubeFont {
	align 256
	0 0 0 0 0 0
	image dma4x5  0 5 8>"32----01" 6^ inv	tiles 5 0 23
	image dma4x5  0 11 8>"32----01" 6^ inv	tiles 5 0 12
	0
}


inline c3_ddy {
	a?ccdy4 >={ a-ccdy4 x++ x++ x++ x++}
	a?ccdy2 >={ a-ccdy2 x++ x++ }
	a?tmp5  >={ a-tmp5 x++ }
}

inline c3_ddy_min {
	a?ccdy4 >={ a-ccdy4 x-- x-- x-- x--}
	a?ccdy2 >={ a-ccdy2 x-- x-- }
	a?tmp5  >={ a-tmp5 x-- }
}


func c3line_b {
	// input:
	//	tmp1	- start position X
	//	tmp2	- start position Y	(ccdy)	- not modified
	//  tmp3	- end position X
	//	tmp4	- end position Y			- not modified
	//

	a=tmp3 c+ a-tmp1 tmp3=a		// tmp3 = X delta
	>=0 {
		a=tmp4 c+ a-tmp2 <0{ goto c3l_end } =={ goto c3l_end }
		y=tmp2
		tmp5=a
		a<< ccdy2=a
		a<< ccdy4=a
		
		x=tmp1
		a=tmp3
		a>>
		nocross {
			{
				c3_ddy
				frambuff,y=x
				c- a+tmp3
				y++
				y?tmp4
			}!=
		}
	} else
	{
		a^0xFF c- a+1 tmp3=a
		a=tmp4 c+ a-tmp2 <0{ goto c3l_end } =={ goto c3l_end }
		y=tmp2
		tmp5=a
		a<< ccdy2=a
		a<< ccdy4=a
	
		x=tmp1
		a=tmp3
		a>>
		nocross {
			{
				c3_ddy_min
				frambuff,y=x
				c- a+tmp3
				y++
				y?tmp4
			}!=
		}
	}

	c3l_end:
}

inline c3t_ddy {
	a?ccdy2 >={ a-ccdy2 x++ x++ }
	a?tmp5  >={ a-tmp5 x++ }
}

func c3tex_b {
	// input:
	//	X		- start texture position
	//	tmp2	- start position Y	(ccdy)
	//	tmp4	- end position Y
	//
	//  texture delta is always 7
	//

	a=tmp4 c+ a-tmp2 <0{ goto c3t_end } =={ goto c3t_end }
	y=tmp2
	tmp5=a
	a<< ccdy2=a
		
	tmp3=a=0xFC
	nocross {
		{
			a=7 a+tmp3
			c3t_ddy
			tmp3=a
			a=frambuff,y a&0x3C a|CubeFont,x frambuff,y=a
			y++
			y?tmp4
		}!=
	}

	c3t_end:
}

data TestSine {
	align 64
	for x=0..63 eval [cos(x/64*2*pi)*7+8]
}

data CubeSineX3 {
	for x=0..191 eval [c=cos((x-80)/128*2*pi)*.5+.5, c=c*2-1, c*31+32]
}

data CubeSineY3 {
	for x=0..191 eval [s=sin((x-80)/128*2*pi)*.5+.5, s=s+(1-s)*s*.25, s=s*2-1, s*31.5+32]
}

data CubeText {
	charset " abcdefghijklmnopqrstuvwxyz)123456789("
	evaluator [x*6]
//	 !---*---*---*---!---*---*---*---!---*---*---*---!---*---*---*---
	"  fcuk a textured cube how can atari 26oo do that 5o fps ) ) ) )"
}

data CubeCol3A {
	for x=0..31 eval [e=1-x/31, e=1-(1-e)*(1-e), color(e*.8,e,e*1.2)]
}

data CubeCol3B {
	for x=0..31 eval [e=x/31, e=1-(1-e)*(1-e), color(e*.8,e,e*1.2)]
}

data CubeScale3 {
	for x=0..31 eval [12-12*cos(x/32*2*pi)]
}

data CubeScale3B {
	for x=0..31 eval [26*(.5-.5*cos(x/32*2*pi))]
}

func fx_cube3_init {
	a=0 py1=a py2=a py3=a
}

func fx_cube3 {

	far fsync1 far song_player

	fsync2

	tmp4=a=py2
	tmp2=a=py1
	a=c3c_spare c- a+1 a&0x3F x=a a=CubeText,x x=a
	c3tex_b

	tmp4=a=py3
	tmp2=a=py2
	a=c3c_spare a&0x3F x=a a=CubeText,x x=a
	c3tex_b

	far fsync3


	//y=63 { a=y a>> c- a+5 x=a a=frambuff,y a<< a<< a&0x3C a|CubeFont,x frambuff,y=a y-- }>=0
	cube3_core

	fbclr

	a=fx_data a&0x1F y=a tmp5=a=CubeScale3,y tmp4=a tmp3=a=CubeScale3B,y
	//a=0 tmp4=a tmp5=a tmp3=a=6
	a=fx_counter a&0x1F c- a+32	y=a	c+ a-tmp5 x=a	a=y c- a+tmp5 y=a
		a=CubeSineX3,x c- a+CubeSineX3,y c+ a-tmp3 a>> px1=a
	a=fx_counter a&0x1F c- a+32	y=a	c+ a-tmp5 x=a	a=y c- a+tmp4 y=a
		a=CubeSineY3,x c- a+CubeSineY3,y a>> py1=a
	a=fx_counter a&0x1F c- a+64	y=a	c+ a-tmp5 x=a	a=y c- a+tmp5 y=a
		a=CubeSineX3,x c- a+CubeSineX3,y c+ a-tmp3 a>> px2=a
	a=fx_counter a&0x1F c- a+64	y=a	c+ a-tmp5 x=a	a=y c- a+tmp4 y=a
		a=CubeSineY3,x c- a+CubeSineY3,y a>> py2=a
	a=fx_counter a&0x1F c- a+96	y=a	c+ a-tmp5 x=a	a=y c- a+tmp5 y=a
		a=CubeSineX3,x c- a+CubeSineX3,y c+ a-tmp3 a>> px3=a
	a=fx_counter a&0x1F c- a+96	y=a	c+ a-tmp5 x=a	a=y c- a+tmp4 y=a
		a=CubeSineY3,x c- a+CubeSineY3,y a>> py3=a
	a=fx_data a>> a>> c3c_spare=a
	

	tmp3=a=px2 tmp4=a=py2 c- a+1 c3c_split=a
	tmp1=a=px1 tmp2=a=py1
	c3line_b
	a=fx_counter a&0x1F y=a
	c3c_col1=a=CubeCol3A,y
	c3c_col2=a=CubeCol3B,y

	tmp3=a=px3 tmp4=a=py3
	tmp1=a=px2 tmp2=a=py2
	c3line_b

//	wsync cbg=a=0x02
//	wsync cbg=a=0x00
}

func seq_cube3 {
	fx_cube3_init

	fx_counter=a=0 fx_data=a
	{
		fx_counter++
		a=fx_counter a&7 =={ fx_data++ }
		fx_cube3
		a=demo_event a?24
	}<
	demo_event=a=0
}
