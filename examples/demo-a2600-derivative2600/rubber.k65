/* TODO:
 *
 * Optimize:
 * - Size: Instead of sl11, do sl4 and reduce GRPTable to 8 bytes (and #7, tax, ..., ldx data2, ...)
 *
 * Ideas for effects:
 * - Not only change bent add, but also offset to numFrame (sine?)
 */
 
bank rubber;

// Temporary
var curLine=0x89, data0, data1, data2;
var COLPFMValue, COLPValue, PFValue, GRPValue, NUSIZValue;
var frameData[40], lineColorData[40]; 
var linePtr[2];
var colTablePtr1[2], colTablePtr2[2], colTablePtr3[2];
var endLine, curFrame, curFrameLo, frameAdd, frameAddLo;
var var_rubber_end ?;



// Interleaved color gradients for all 3 faces from dark to light to dark again.
// Indexes into colorTable1 and 2
data rubber_gradient_interleaved_1 {
	nocross
	0x11 0x22 0x11 0x22 0x22
	0x22 0x33 0x22 0x33 0x33
	0x33 0x44 0x33 0x44 0x44
	0x44 0x55 0x44 0x55 0x55 0x55
	0x55 0x44 0x55 0x44 0x44
	0x44 0x33 0x44 0x33 0x33
	0x33 0x22 0x33 0x22 0x22
	0x22 0x11 0x22 0x11
	0x11 0x22 0x11 0x22 0x22
	0x22 0x33 0x22 0x33 0x33
	0x33 0x44 0x33 0x44 0x44
	0x44 0x55 0x44 0x55 0x55 0x55
	0x55 0x44 0x55 0x44 0x44
	0x44 0x33 0x44 0x33 0x33
	0x33 0x22 0x33 0x22 0x22
	0x22 0x11 0x22 0x11
}
data rubber_gradient_interleaved_2 {
	nocross
	0x66 0x77 0x66 0x77 0x77
	0x77 0x88 0x77 0x88 0x88
	0x88 0x99 0x88 0x99 0x99
	0x99 0xaa 0x99 0xaa 0xaa 0xaa
	0xaa 0x99 0xaa 0x99 0x99
	0x99 0x88 0x99 0x88 0x88
	0x88 0x77 0x88 0x77 0x77
	0x77 0x66 0x77 0x66
	0x66 0x77 0x66 0x77 0x77
	0x77 0x88 0x77 0x88 0x88
	0x88 0x99 0x88 0x99 0x99
	0x99 0xaa 0x99 0xaa 0xaa 0xaa
	0xaa 0x99 0xaa 0x99 0x99
	0x99 0x88 0x99 0x88 0x88
	0x88 0x77 0x88 0x77 0x77
	0x77 0x66 0x77 0x66
}
data rubber_gradient_interleaved_3 {
	nocross
	0xbb 0xcc 0xbb 0xcc 0xcc
	0xcc 0xdd 0xcc 0xdd 0xdd
	0xdd 0xee 0xdd 0xee 0xee
	0xee 0xff 0xee 0xff 0xff 0xff
	0xff 0xee 0xff 0xee 0xee
	0xee 0xdd 0xee 0xdd 0xdd
	0xdd 0xcc 0xdd 0xcc 0xcc
	0xcc 0xbb 0xcc 0xbb
	0xbb 0xcc 0xbb 0xcc 0xcc
	0xcc 0xdd 0xcc 0xdd 0xdd
	0xdd 0xee 0xdd 0xee 0xee
	0xee 0xff 0xee 0xff 0xff 0xff
	0xff 0xee 0xff 0xee 0xee
	0xee 0xdd 0xee 0xdd 0xdd
	0xdd 0xcc 0xdd 0xcc 0xcc
	0xcc 0xbb 0xcc 0xbb
}
data rubber_gradient_blob {
	nocross
	for x=0..80 eval [0x66]
}
data rubber_gradient_single_1 {
	nocross
	for x=0..80 eval [0x55]
}
data rubber_gradient_single_2 {
	nocross
	for x=0..80 eval [0xaa]
}
data rubber_gradient_single_3 {
	nocross
	for x=0..80 eval [0xff]
}


/* Prepare rubber RAM for next frame.
 * IN:
 * 	x: starting line index
 *	a: end line index (exclusive)
 */
func rubber_prepare {
	address 0xfe28
	
	endLine=a
	// Loop over lines in [x, endLine[
	a=curFrame
	{
		// this line in x
		// curFrame in a
		curLine=x
		/* Store frame number */
		frameData,x=a
		y=a	// save for fetch palette

		/* Fetch palette */
		// x is line number
		// y is frame number = frameData,x
		// Get data ptr and bank number
		linePtr=a=ptrLoTable,y linePtr+1=a=ptrHiTable,y
		a=lineMul3Table,x x=bankTable,y y=a
		// Switch bank and fetch palette data, then switch back
		a=bank_0,x
.fetchPalette:
		a=(linePtr),y
		data {0x0c 0xf9 0x1f} //nop bank_rubber

		// Test for empty line
		nocross {
			!=goto .nonEmptyLine
			y=curLine
			goto .storeColor
.nonEmptyLine:
			>=0{
				// Low: Index 1
				a<< >=0{
					// High: Index 1
					y=curLine
					x=curFrame
					// Low nibble
					a=color_indexes_1,x
					=={
						a=(colTablePtr1),y
					} else {
						<0{
							a=(colTablePtr2),y
						} else {
							a=(colTablePtr3),y
						}
					}
					// Store for later combine
					a&0x0f tmp=a
					// High nibble
					a=color_indexes_1,x
					=={
						a=(colTablePtr1),y
					} else {
						<0{
							a=(colTablePtr2),y
						} else {
							a=(colTablePtr3),y
						}
					}
					goto .combineAndStore
				}
				// else: High: Index 2
				y=curLine
				x=curFrame
				// Low nibble
				a=color_indexes_1,x
				=={
					a=(colTablePtr1),y
				} else {
					<0{
						a=(colTablePtr2),y
					} else {
						a=(colTablePtr3),y
					}
				}
				// Store for later combine
				a&0x0f tmp=a
				// High nibble
				a=color_indexes_2,x
				<0{
					a=(colTablePtr2),y
				} else {
					a=(colTablePtr3),y
				}
				goto .combineAndStore
			}
			// else: Low: Index 2
			a<< >=0{
				// High: Index 1
				y=curLine
				x=curFrame
				// Low nibble
				a=color_indexes_2,x
				<0{
					a=(colTablePtr2),y
				} else {
					a=(colTablePtr3),y
				}
				// Store for later combine
				a&0x0f tmp=a
				// High nibble
				a=color_indexes_1,x
				=={
					a=(colTablePtr1),y
				} else {
					<0{
						a=(colTablePtr2),y
					} else {
						a=(colTablePtr3),y
					}
				}
				goto .combineAndStore
			}
			// else: High: Index 2
			y=curLine
			x=curFrame
			// Low nibble
			a=color_indexes_2,x
			<0{
				a=(colTablePtr2),y
			} else {
				a=(colTablePtr3),y
			}
			// Store for later combine
			a&0x0f tmp=a
			// High nibble
			a=color_indexes_2,x
			<0{
				a=(colTablePtr2),y
			} else {
				a=(colTablePtr3),y
			}
		}
.combineAndStore:
		a&0xf0 a|tmp

.storeColor:
		lineColorData,y=a

		/* Advance frame number */
		a=curFrameLo c- a+frameAddLo curFrameLo=a a=curFrame a+frameAdd a?150 >={a-150} curFrame=a
		
		/* Loop */
		x=curLine x++ x?endLine ==goto .endLoop
	}always
.endLoop:

	a=bank_core
}



/* Kernel: Display rubber cube
 * IN:
 * a: PF2 value
 * x: GRP0 value
 * y: NUSIZ value
 * M1 already enabled
 */ 
func display_rubber_loop {
	 address 0xf03c
	 
.displayP0M1:
	// @73
	wsync
	
	////////////////////////////////////////////////////////////
	// @0, enable/disable objects and set colors
	hmove
	PF2=a GRP0=x NUSIZ1=NUSIZ0=y
	a=0 ENAM0=a GRP1=a
	COLUP0=a=COLPValue COLUP1=a=COLPFMValue COLUPF=a
EntryPoint:
	// @38
	HMCLR+256=a	// sleep 1
	
	// @44, fetch next color and frame number from RAM
	x=curLine y=lineColorData,x
	COLPFMValue=a=(colTablePtr1),y COLPValue=a=(colTablePtr2),y
	y=frameData,x
	// @69, get data ptr and bank number
	linePtr=a=ptrLoTable,y
	////////////////////////////////////////////////////////////
	// @0, enable/disable objects and set colors
	hmove
	linePtr+1=a=ptrHiTable,y
	a=lineMul3Table,x x=bankTable,y y=a
	
	// @20, switch bank and fetch line data bytes, then switch back
	a=bank_0,x
.otherBank_1:
	data0=a=(linePtr),y y++
	data1=a=(linePtr),y y++
	data2=a=x=(linePtr),y
	a&?bank_rubber
	
	// @56-59, calc PF and GRP values
	PFValue=a=PFTable,x
	a=x a&7 x=a
	wsync
	
	////////////////////////////////////////////////////////////
	// @0
	hmove
	GRPValue=a=GRPTable,x
	sl4

	// @14, get and do P xpos
	a=data0 a&0b00111111 y=a
	HMP1=a=HMTable,y
	x=delayTable,y nocross{x--}!= RESP1=a
	
	// @54, calc NUSIZ value
	x=data1 a=data2 a<< a&0b00110000 a|NUSIZTable,x NUSIZValue=a
	sl2
	wsync

	////////////////////////////////////////////////////////////
	// @0
	hmove
	sl3
	
	// @6, dec counter
	curLine--
	
	// @11, get and do M xPos
	a=data1 a&0b00111111 y=a
	a=HMTable,y x=delayTable,y
	HMCLR=a HMM0=a
	nocross{x--}!= RESM0=a
	
	// @54, enable next missile and pre-load GFX values
	ENAM0=a=2
	a=PFValue x=GRPValue y=NUSIZValue
	
	// @68
	

	// ************************************************************
.displayP1M0:
	// @73
	wsync
	
	////////////////////////////////////////////////////////////
	// @0, enable/disable objects and set colors
	hmove
	PF2=a GRP1=x NUSIZ1=NUSIZ0=y
	a=0 ENAM1=a GRP0=a
	COLUP1=a=COLPValue COLUP0=a=COLPFMValue COLUPF=a
	// @38
	HMCLR+256=a	// sleep 1
	
	// @44, fetch next color and frame number from RAM
	x=curLine y=lineColorData,x
	COLPFMValue=a=(colTablePtr1),y COLPValue=a=(colTablePtr2),y
	y=frameData,x
	// @69, get data ptr and bank number
	linePtr=a=ptrLoTable,y
	////////////////////////////////////////////////////////////
	// @0, enable/disable objects and set colors
	hmove
	linePtr+1=a=ptrHiTable,y
	a=lineMul3Table,x x=bankTable,y y=a
	
	// @20, switch bank and fetch line data bytes, then switch back
	a=bank_0,x
.otherBank_2:
	data0=a=(linePtr),y y++
	data1=a=(linePtr),y y++
	data2=a=x=(linePtr),y
	a&?bank_rubber
	
	// @56-59, calc PF and GRP values
	PFValue=a=PFTable,x
	a=x a&7 x=a
	wsync
	
	////////////////////////////////////////////////////////////
	// @0
	hmove
	
	GRPValue=a=GRPTable,x
	sl4

	// @14, get and do P xpos
	a=data0 a&0b00111111 y=a
	HMP0=a=HMTable,y
	x=delayTable,y nocross{x--}!= RESP0=a
	
	// @54, calc NUSIZ value
	x=data1 a=data2 a<< a&0b00110000 a|NUSIZTable,x NUSIZValue=a
	sl2
	wsync

	////////////////////////////////////////////////////////////
	// @0
	hmove
	
	// @3, dec counter and set V flag accordingly for later branch
	curLine-- a&?curLine
	
	// @11, get and do M xPos
	a=data1 a&0b00111111 y=a
	a=HMTable,y x=delayTable,y
	HMCLR=a HMM1=a
	nocross{x--}!= RESM1=a
	
	// @54, enable next missile and pre-load GFX values
	ENAM1=a=2
	a=PFValue x=GRPValue y=NUSIZValue
	
	// @68
	<<=goto .end
	goto .displayP0M1


	// ************************************************************
.end:
	// @73
	wsync

	////////////////////////////////////////////////////////////
	// @0
	hmove
	
	// @3 enable/disable objects and set colors
	PF2=a GRP0=x NUSIZ1=NUSIZ0=y
	a=0 ENAM0=a GRP1=a
	COLUP0=a=COLPValue COLUP1=a=COLPFMValue COLUPF=a
	HMCLR=a
	wsync hmove wsync hmove wsync hmove ENAM1=GRP0=PF2=a=0

.rubberEnd:
	// Return to main bank
	a=bank_core
}

// Set loop counter and enter loop at correct cycle
func display_rubber {
	address 0xf020
	wsync hmove
	curLine=a=39 sl24 sl3
	goto EntryPoint
}


 
//////////////////////////////////////////////////////////////////////
// Data
//////////////////////////////////////////////////////////////////////



data colorTable1_rgb {
	align 256
	0x94 0x94 0x94 0x94 0x94 0x94 0x94 0x94 
	0x94 0x94 0x94 0x94 0x94 0x94 0x94 0x94 
	0x72 0x72 0x72 0x72 0x72 0x72 0x72 0x72 
	0x72 0x72 0x72 0x72 0x72 0x72 0x72 0x72 
	0x74 0x74 0x74 0x74 0x74 0x74 0x74 0x74 
	0x74 0x74 0x74 0x74 0x74 0x74 0x74 0x74 
	0x78 0x78 0x78 0x78 0x78 0x78 0x78 0x78 
	0x78 0x78 0x78 0x78 0x78 0x78 0x78 0x78 
	0x7a 0x7a 0x7a 0x7a 0x7a 0x7a 0x7a 0x7a 
	0x7a 0x7a 0x7a 0x7a 0x7a 0x7a 0x7a 0x7a 
	0x7e 0x7e 0x7e 0x7e 0x7e 0x7e 0x7e 0x7e 
	0x7e 0x7e 0x7e 0x7e 0x7e 0x7e 0x7e 0x7e 
	0x6 0x6 0x6 0x6 0x6 0x6 0x6 0x6 
	0x6 0x6 0x6 0x6 0x6 0x6 0x6 0x6 
	0x8 0x8 0x8 0x8 0x8 0x8 0x8 0x8 
	0x8 0x8 0x8 0x8 0x8 0x8 0x8 0x8 
	0xa 0xa 0xa 0xa 0xa 0xa 0xa 0xa 
	0xa 0xa 0xa 0xa 0xa 0xa 0xa 0xa 
	0xc 0xc 0xc 0xc 0xc 0xc 0xc 0xc 
	0xc 0xc 0xc 0xc 0xc 0xc 0xc 0xc 
	0xe 0xe 0xe 0xe 0xe 0xe 0xe 0xe 
	0xe 0xe 0xe 0xe 0xe 0xe 0xe 0xe 
	0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 
	0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 
	0x24 0x24 0x24 0x24 0x24 0x24 0x24 0x24 
	0x24 0x24 0x24 0x24 0x24 0x24 0x24 0x24 
	0x28 0x28 0x28 0x28 0x28 0x28 0x28 0x28 
	0x28 0x28 0x28 0x28 0x28 0x28 0x28 0x28 
	0x2a 0x2a 0x2a 0x2a 0x2a 0x2a 0x2a 0x2a 
	0x2a 0x2a 0x2a 0x2a 0x2a 0x2a 0x2a 0x2a 
	0x2e 0x2e 0x2e 0x2e 0x2e 0x2e 0x2e 0x2e 
	0x2e 0x2e 0x2e 0x2e 0x2e 0x2e 0x2e 0x2e 
}

data colorTable2_rgb {
	align 256
	0x94 0x72 0x74 0x78 0x7a 0x7e 0x6 0x8 
	0xa 0xc 0xe 0x20 0x24 0x28 0x2a 0x2e 
	0x94 0x72 0x74 0x78 0x7a 0x7e 0x6 0x8 
	0xa 0xc 0xe 0x20 0x24 0x28 0x2a 0x2e 
	0x94 0x72 0x74 0x78 0x7a 0x7e 0x6 0x8 
	0xa 0xc 0xe 0x20 0x24 0x28 0x2a 0x2e 
	0x94 0x72 0x74 0x78 0x7a 0x7e 0x6 0x8 
	0xa 0xc 0xe 0x20 0x24 0x28 0x2a 0x2e 
	0x94 0x72 0x74 0x78 0x7a 0x7e 0x6 0x8 
	0xa 0xc 0xe 0x20 0x24 0x28 0x2a 0x2e 
	0x94 0x72 0x74 0x78 0x7a 0x7e 0x6 0x8 
	0xa 0xc 0xe 0x20 0x24 0x28 0x2a 0x2e 
	0x94 0x72 0x74 0x78 0x7a 0x7e 0x6 0x8 
	0xa 0xc 0xe 0x20 0x24 0x28 0x2a 0x2e 
	0x94 0x72 0x74 0x78 0x7a 0x7e 0x6 0x8 
	0xa 0xc 0xe 0x20 0x24 0x28 0x2a 0x2e 
	0x94 0x72 0x74 0x78 0x7a 0x7e 0x6 0x8 
	0xa 0xc 0xe 0x20 0x24 0x28 0x2a 0x2e 
	0x94 0x72 0x74 0x78 0x7a 0x7e 0x6 0x8 
	0xa 0xc 0xe 0x20 0x24 0x28 0x2a 0x2e 
	0x94 0x72 0x74 0x78 0x7a 0x7e 0x6 0x8 
	0xa 0xc 0xe 0x20 0x24 0x28 0x2a 0x2e 
	0x94 0x72 0x74 0x78 0x7a 0x7e 0x6 0x8 
	0xa 0xc 0xe 0x20 0x24 0x28 0x2a 0x2e 
	0x94 0x72 0x74 0x78 0x7a 0x7e 0x6 0x8 
	0xa 0xc 0xe 0x20 0x24 0x28 0x2a 0x2e 
	0x94 0x72 0x74 0x78 0x7a 0x7e 0x6 0x8 
	0xa 0xc 0xe 0x20 0x24 0x28 0x2a 0x2e 
	0x94 0x72 0x74 0x78 0x7a 0x7e 0x6 0x8 
	0xa 0xc 0xe 0x20 0x24 0x28 0x2a 0x2e 
	0x94 0x72 0x74 0x78 0x7a 0x7e 0x6 0x8 
	0xa 0xc 0xe 0x20 0x24 0x28 0x2a 0x2e 
}

data colorTable1_dark {
	align 256
	0x94 0x94 0x94 0x94 0x94 0x94 0x94 0x94 
	0x94 0x94 0x94 0x94 0x94 0x94 0x94 0x94 
	0x60 0x60 0x60 0x60 0x60 0x60 0x60 0x60 
	0x60 0x60 0x60 0x60 0x60 0x60 0x60 0x60 
	0x62 0x62 0x62 0x62 0x62 0x62 0x62 0x62 
	0x62 0x62 0x62 0x62 0x62 0x62 0x62 0x62 
	0x64 0x64 0x64 0x64 0x64 0x64 0x64 0x64 
	0x64 0x64 0x64 0x64 0x64 0x64 0x64 0x64 
	0x66 0x66 0x66 0x66 0x66 0x66 0x66 0x66 
	0x66 0x66 0x66 0x66 0x66 0x66 0x66 0x66 
	0x68 0x68 0x68 0x68 0x68 0x68 0x68 0x68 
	0x68 0x68 0x68 0x68 0x68 0x68 0x68 0x68 
	0xb2 0xb2 0xb2 0xb2 0xb2 0xb2 0xb2 0xb2 
	0xb2 0xb2 0xb2 0xb2 0xb2 0xb2 0xb2 0xb2 
	0xb4 0xb4 0xb4 0xb4 0xb4 0xb4 0xb4 0xb4 
	0xb4 0xb4 0xb4 0xb4 0xb4 0xb4 0xb4 0xb4 
	0xb6 0xb6 0xb6 0xb6 0xb6 0xb6 0xb6 0xb6 
	0xb6 0xb6 0xb6 0xb6 0xb6 0xb6 0xb6 0xb6 
	0xb8 0xb8 0xb8 0xb8 0xb8 0xb8 0xb8 0xb8 
	0xb8 0xb8 0xb8 0xb8 0xb8 0xb8 0xb8 0xb8 
	0xba 0xba 0xba 0xba 0xba 0xba 0xba 0xba 
	0xba 0xba 0xba 0xba 0xba 0xba 0xba 0xba 
	0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 
	0x30 0x30 0x30 0x30 0x30 0x30 0x30 0x30 
	0x32 0x32 0x32 0x32 0x32 0x32 0x32 0x32 
	0x32 0x32 0x32 0x32 0x32 0x32 0x32 0x32 
	0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 
	0x34 0x34 0x34 0x34 0x34 0x34 0x34 0x34 
	0x36 0x36 0x36 0x36 0x36 0x36 0x36 0x36 
	0x36 0x36 0x36 0x36 0x36 0x36 0x36 0x36 
	0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 
	0x38 0x38 0x38 0x38 0x38 0x38 0x38 0x38 
}

data colorTable2_dark {
	align 256
	0x94 0x60 0x62 0x64 0x66 0x68 0xb2 0xb4 
	0xb6 0xb8 0xba 0x30 0x32 0x34 0x36 0x38 
	0x94 0x60 0x62 0x64 0x66 0x68 0xb2 0xb4 
	0xb6 0xb8 0xba 0x30 0x32 0x34 0x36 0x38 
	0x94 0x60 0x62 0x64 0x66 0x68 0xb2 0xb4 
	0xb6 0xb8 0xba 0x30 0x32 0x34 0x36 0x38 
	0x94 0x60 0x62 0x64 0x66 0x68 0xb2 0xb4 
	0xb6 0xb8 0xba 0x30 0x32 0x34 0x36 0x38 
	0x94 0x60 0x62 0x64 0x66 0x68 0xb2 0xb4 
	0xb6 0xb8 0xba 0x30 0x32 0x34 0x36 0x38 
	0x94 0x60 0x62 0x64 0x66 0x68 0xb2 0xb4 
	0xb6 0xb8 0xba 0x30 0x32 0x34 0x36 0x38 
	0x94 0x60 0x62 0x64 0x66 0x68 0xb2 0xb4 
	0xb6 0xb8 0xba 0x30 0x32 0x34 0x36 0x38 
	0x94 0x60 0x62 0x64 0x66 0x68 0xb2 0xb4 
	0xb6 0xb8 0xba 0x30 0x32 0x34 0x36 0x38 
	0x94 0x60 0x62 0x64 0x66 0x68 0xb2 0xb4 
	0xb6 0xb8 0xba 0x30 0x32 0x34 0x36 0x38 
	0x94 0x60 0x62 0x64 0x66 0x68 0xb2 0xb4 
	0xb6 0xb8 0xba 0x30 0x32 0x34 0x36 0x38 
	0x94 0x60 0x62 0x64 0x66 0x68 0xb2 0xb4 
	0xb6 0xb8 0xba 0x30 0x32 0x34 0x36 0x38 
	0x94 0x60 0x62 0x64 0x66 0x68 0xb2 0xb4 
	0xb6 0xb8 0xba 0x30 0x32 0x34 0x36 0x38 
	0x94 0x60 0x62 0x64 0x66 0x68 0xb2 0xb4 
	0xb6 0xb8 0xba 0x30 0x32 0x34 0x36 0x38 
	0x94 0x60 0x62 0x64 0x66 0x68 0xb2 0xb4 
	0xb6 0xb8 0xba 0x30 0x32 0x34 0x36 0x38 
	0x94 0x60 0x62 0x64 0x66 0x68 0xb2 0xb4 
	0xb6 0xb8 0xba 0x30 0x32 0x34 0x36 0x38 
	0x94 0x60 0x62 0x64 0x66 0x68 0xb2 0xb4 
	0xb6 0xb8 0xba 0x30 0x32 0x34 0x36 0x38 
}

data ptrLoTable {
	nocross
	&<frame_0 &<frame_1 &<frame_2 &<frame_3 &<frame_4 &<frame_5 &<frame_6 &<frame_7 
	&<frame_8 &<frame_9 &<frame_10 &<frame_11 &<frame_12 &<frame_13 &<frame_14 &<frame_15 
	&<frame_16 &<frame_17 &<frame_18 &<frame_19 &<frame_20 &<frame_21 &<frame_22 &<frame_23 
	&<frame_24 &<frame_25 &<frame_26 &<frame_27 &<frame_28 &<frame_29 &<frame_30 &<frame_31 
	&<frame_32 &<frame_33 &<frame_34 &<frame_35 &<frame_36 &<frame_37 &<frame_38 &<frame_39 
	&<frame_40 &<frame_41 &<frame_42 &<frame_43 &<frame_44 &<frame_45 &<frame_46 &<frame_47 
	&<frame_48 &<frame_49 &<frame_50 &<frame_51 &<frame_52 &<frame_53 &<frame_54 &<frame_55 
	&<frame_56 &<frame_57 &<frame_58 &<frame_59 &<frame_60 &<frame_61 &<frame_62 &<frame_63 
	&<frame_64 &<frame_65 &<frame_66 &<frame_67 &<frame_68 &<frame_69 &<frame_70 &<frame_71 
	&<frame_72 &<frame_73 &<frame_74 &<frame_75 &<frame_76 &<frame_77 &<frame_78 &<frame_79 
	&<frame_80 &<frame_81 &<frame_82 &<frame_83 &<frame_84 &<frame_85 &<frame_86 &<frame_87 
	&<frame_88 &<frame_89 &<frame_90 &<frame_91 &<frame_92 &<frame_93 &<frame_94 &<frame_95 
	&<frame_96 &<frame_97 &<frame_98 &<frame_99 &<frame_100 &<frame_101 &<frame_102 &<frame_103 
	&<frame_104 &<frame_105 &<frame_106 &<frame_107 &<frame_108 &<frame_109 &<frame_110 &<frame_111 
	&<frame_112 &<frame_113 &<frame_114 &<frame_115 &<frame_116 &<frame_117 &<frame_118 &<frame_119 
	&<frame_120 &<frame_121 &<frame_122 &<frame_123 &<frame_124 &<frame_125 &<frame_126 &<frame_127 
	&<frame_128 &<frame_129 &<frame_130 &<frame_131 &<frame_132 &<frame_133 &<frame_134 &<frame_135 
	&<frame_136 &<frame_137 &<frame_138 &<frame_139 &<frame_140 &<frame_141 &<frame_142 &<frame_143 
	&<frame_144 &<frame_145 &<frame_146 &<frame_147 &<frame_148 &<frame_149 
}

data ptrHiTable {
	nocross
	&>frame_0 &>frame_1 &>frame_2 &>frame_3 &>frame_4 &>frame_5 &>frame_6 &>frame_7 
	&>frame_8 &>frame_9 &>frame_10 &>frame_11 &>frame_12 &>frame_13 &>frame_14 &>frame_15 
	&>frame_16 &>frame_17 &>frame_18 &>frame_19 &>frame_20 &>frame_21 &>frame_22 &>frame_23 
	&>frame_24 &>frame_25 &>frame_26 &>frame_27 &>frame_28 &>frame_29 &>frame_30 &>frame_31 
	&>frame_32 &>frame_33 &>frame_34 &>frame_35 &>frame_36 &>frame_37 &>frame_38 &>frame_39 
	&>frame_40 &>frame_41 &>frame_42 &>frame_43 &>frame_44 &>frame_45 &>frame_46 &>frame_47 
	&>frame_48 &>frame_49 &>frame_50 &>frame_51 &>frame_52 &>frame_53 &>frame_54 &>frame_55 
	&>frame_56 &>frame_57 &>frame_58 &>frame_59 &>frame_60 &>frame_61 &>frame_62 &>frame_63 
	&>frame_64 &>frame_65 &>frame_66 &>frame_67 &>frame_68 &>frame_69 &>frame_70 &>frame_71 
	&>frame_72 &>frame_73 &>frame_74 &>frame_75 &>frame_76 &>frame_77 &>frame_78 &>frame_79 
	&>frame_80 &>frame_81 &>frame_82 &>frame_83 &>frame_84 &>frame_85 &>frame_86 &>frame_87 
	&>frame_88 &>frame_89 &>frame_90 &>frame_91 &>frame_92 &>frame_93 &>frame_94 &>frame_95 
	&>frame_96 &>frame_97 &>frame_98 &>frame_99 &>frame_100 &>frame_101 &>frame_102 &>frame_103 
	&>frame_104 &>frame_105 &>frame_106 &>frame_107 &>frame_108 &>frame_109 &>frame_110 &>frame_111 
	&>frame_112 &>frame_113 &>frame_114 &>frame_115 &>frame_116 &>frame_117 &>frame_118 &>frame_119 
	&>frame_120 &>frame_121 &>frame_122 &>frame_123 &>frame_124 &>frame_125 &>frame_126 &>frame_127 
	&>frame_128 &>frame_129 &>frame_130 &>frame_131 &>frame_132 &>frame_133 &>frame_134 &>frame_135 
	&>frame_136 &>frame_137 &>frame_138 &>frame_139 &>frame_140 &>frame_141 &>frame_142 &>frame_143 
	&>frame_144 &>frame_145 &>frame_146 &>frame_147 &>frame_148 &>frame_149 
}

data bankTable {
	nocross
	3 3 0 0 1 1 6 6 
	2 2 2 2 2 2 2 2 
	2 2 2 2 2 2 2 2 
	2 2 2 2 2 2 3 3 
	3 3 3 3 3 3 3 3 
	3 3 3 3 3 3 3 3 
	3 3 3 3 3 3 3 3 
	3 3 3 3 0 0 0 0 
	0 0 0 0 0 0 0 0 
	0 0 0 0 0 0 0 0 
	0 0 0 0 0 0 0 0 
	0 0 1 1 1 1 1 1 
	1 1 1 1 1 1 1 1 
	1 1 1 1 1 1 1 1 
	1 1 1 1 1 1 1 1 
	6 6 6 6 6 6 6 6 
	6 6 6 6 6 6 6 6 
	6 6 6 6 6 6 6 6 
	6 6 6 6 6 6 
	// To instantiate the fetch functions in the data banks
	&<fetch_d1_1 &<fetch_d1_2
	&<fetch_d2_1 &<fetch_d2_2
	&<fetch_d3_1 &<fetch_d3_2
	&<fetch_d4_1 &<fetch_d4_2
	&<fetch_d5_1 &<fetch_d5_2
	&<fetch_palette_1
	&<fetch_palette_2
	&<fetch_palette_3
	&<fetch_palette_4
	&<fetch_palette_5
}

data lineMul3Table {
	nocross
	for x=0..39 eval [x*3]
}

data PFTable {
	align 256
	0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 
	0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 
	0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 
	0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 
	0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 
	0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 
	0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 
	0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 
	0xc0 0xc0 0xc0 0xc0 0xc0 0xc0 0xc0 0xc0 
	0xc0 0xc0 0xc0 0xc0 0xc0 0xc0 0xc0 0xc0 
	0xc0 0xc0 0xc0 0xc0 0xc0 0xc0 0xc0 0xc0 
	0xc0 0xc0 0xc0 0xc0 0xc0 0xc0 0xc0 0xc0 
	0xe0 0xe0 0xe0 0xe0 0xe0 0xe0 0xe0 0xe0 
	0xe0 0xe0 0xe0 0xe0 0xe0 0xe0 0xe0 0xe0 
	0xe0 0xe0 0xe0 0xe0 0xe0 0xe0 0xe0 0xe0 
	0xe0 0xe0 0xe0 0xe0 0xe0 0xe0 0xe0 0xe0 
	0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
	0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
	0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
	0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
	0xf8 0xf8 0xf8 0xf8 0xf8 0xf8 0xf8 0xf8 
	0xf8 0xf8 0xf8 0xf8 0xf8 0xf8 0xf8 0xf8 
	0xf8 0xf8 0xf8 0xf8 0xf8 0xf8 0xf8 0xf8 
	0xf8 0xf8 0xf8 0xf8 0xf8 0xf8 0xf8 0xf8 
	0xfc 0xfc 0xfc 0xfc 0xfc 0xfc 0xfc 0xfc 
	0xfc 0xfc 0xfc 0xfc 0xfc 0xfc 0xfc 0xfc 
	0xfc 0xfc 0xfc 0xfc 0xfc 0xfc 0xfc 0xfc 
	0xfc 0xfc 0xfc 0xfc 0xfc 0xfc 0xfc 0xfc 
	0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 
	0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 
	0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 
	0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 0xfe 
}

data GRPTable {
	nocross
	0x80 0xc0 0xe0 0xf0 0xf8 0xfc 0xfe 0xff 
}

data NUSIZTable {
	nocross
	0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 
	0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 
	0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 
	0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 
	0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 
	0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 
	0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 
	0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 
	0x5 0x5 0x5 0x5 0x5 0x5 0x5 0x5 
	0x5 0x5 0x5 0x5 0x5 0x5 0x5 0x5 
	0x5 0x5 0x5 0x5 0x5 0x5 0x5 0x5 
	0x5 0x5 0x5 0x5 0x5 0x5 0x5 0x5 
	0x5 0x5 0x5 0x5 0x5 0x5 0x5 0x5 
	0x5 0x5 0x5 0x5 0x5 0x5 0x5 0x5 
	0x5 0x5 0x5 0x5 0x5 0x5 0x5 0x5 
	0x5 0x5 0x5 0x5 0x5 0x5 0x5 0x5 
	0x7 0x7 0x7 0x7 0x7 0x7 0x7 0x7 
	0x7 0x7 0x7 0x7 0x7 0x7 0x7 0x7 
	0x7 0x7 0x7 0x7 0x7 0x7 0x7 0x7 
	0x7 0x7 0x7 0x7 0x7 0x7 0x7 0x7 
	0x7 0x7 0x7 0x7 0x7 0x7 0x7 0x7 
	0x7 0x7 0x7 0x7 0x7 0x7 0x7 0x7 
	0x7 0x7 0x7 0x7 0x7 0x7 0x7 0x7 
	0x7 0x7 0x7 0x7 0x7 0x7 0x7 0x7 
}

// dex and HM values for P/M positioning in kernel
data delayTable {
	nocross
	1 1 1 1 1 1 1 1
	1 1 1 1 1 1 1
	2 2 2 2 2 2 2 2
	2 2 2 2 2 2 2
	3 3 3 3 3 3 3 3
	3 3 3 3 3 3 3
	4 4 4 4 4 4 4 4
	4 4 4 4 4 4 4 4
}
data HMTable {
	nocross
	0x70 0x60 0x50 0x40 0x30 0x20 0x10 0x00
	0xf0 0xe0 0xd0 0xc0 0xb0 0xa0 0x90
	0x70 0x60 0x50 0x40 0x30 0x20 0x10 0x00
	0xf0 0xe0 0xd0 0xc0 0xb0 0xa0 0x90
	0x70 0x60 0x50 0x40 0x30 0x20 0x10 0x00
	0xf0 0xe0 0xd0 0xc0 0xb0 0xa0 0x90
	0x70 0x60 0x50 0x40 0x30 0x20 0x10 0x00
	0xf0 0xe0 0xd0 0xc0 0xb0 0xa0 0x90 0x80
}

// Colors used per frame
// Mapping: 0->1, -1->2, 1->3
data color_indexes_1 {
	nocross
	1 1 1 1 1 255 255 255 255 255 255 255 255 255 255 255
	255 255 255 255 255 1 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255
	255 255 255 1 1 1 1 1 1 1 1 1 1 1 1 1
	1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
	1 1 1 1 1 1
}
// Note: no "1" occuring, only 0, 2, 3
// Mapping: 0->0, -1->2, 1->3
data color_indexes_2 {
	nocross
	0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1
	1 1 1 1 1 255 255 255 255 255 255 255 255 255 255 255
	255 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255
	255 255 255 255 1 1 1 1 1 1 1 1 1 1 1 1
	1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1
	1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
	1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0
	0 0 0 0 0 0
}
