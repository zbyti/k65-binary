
/*

x = cA*cB
y = sB
z = sA*cB

x1 = x
y1 = y*cD + z*sD

x1 = cA*cB
y1 = sB*cD + sA*cB*sD

x1 = cAb + cAB
y1 = sBd + sBD + (sAb + sAB)*sD

y1 = sBd + sBD + sAb*sD + sAB*sD

y1 = sBd + sBD + (cAbd - cAbD + cABd - cABD)/2


x1 = cAb + cAB
y1 = sBd + sBD + (cAbd - cAbD + cABd - cABD)/2


*/


data CoSin {
	align 256
	for x=0..255 eval [cos(x/256*2*pi)*30+256]
	for x=0..255 eval [cos(x/256*2*pi)*30+256]
}

data DotColors {
	align 64
	0
	for x = 0 .. 63 eval [clamp(round( cos(x/64*2*pi+pi)*4+4 + .49*sin(x*cos(x*100)) )*2,0,15)+5*16]
}


inline init_drawdot {
	ddCAb+1=a=&>CoSin
	ddCAbd+1=a=&>CoSin
	ddCABd+1=a=&>CoSin
	ddSBd+1=a=&>CoSin
}

func drawdot {
	// ddA - A
	// ddB - B
	// ddD - D

	// x1 = cAb + cAB
	// y1 = sBd + sBD + (cAbd - cAbD + cABd - cABD)/2

	// compute table bases
	a=ddB a-ddD a+192 ddSBd=a		// (ddSBd),y	= sin( B-D + y )
	a=ddA a-ddB ddCAb=a				// (ddCAb),y	= cos( A-B + y )
	a-ddD ddCAbd=a					// (ddCAbd),y	= cos( A-B-D + y )
	ddB<<
	a+ddB ddCABd=a					// (ddCABd),y	= cos( A+B-D + y )
	ddD<<

	// compute Y
	y=0		a=(ddSBd),y		// sin( B-D )
	y=ddD	a+(ddSBd),y		// sin( B+D )
	a<<
			a-(ddCAbd),y	// cos( A-B+D )
			a-(ddCABd),y	// cos( A+B+D )
	y=0		a+(ddCAbd),y	// cos( A-B-D )
			a+(ddCABd),y	// cos( A+B-D )
	a>> a>> a+32 a&0x3F
	x=a

	// compute X
			a=(ddCAb),y		// cos( A-B )
	y=ddB	a+(ddCAb),y		// cos( A+B )
	a+59 	// 59 is minimum, 197 is maximum
	
	// plot
	frambuff,x=a
}

data DfxData_old {
//	0x00 0xF0
//	0x00 0xF8
//	0x00 0x00
//	0x00 0x08
//	0x00 0x10
//	0x18 0xF2
//	0x10 0xFA
//	0x08 0x02
//	0x10 0x0A
//	0x18 0x12
//	0x30 0xF0
//	0x30 0xF8
//	0x30 0x00
//	0x30 0x08
//	0x30 0x10
//	0x48 0xF2
//	0x40 0xFA
//	0x38 0x02
//	0x40 0x0A
//	0x48 0x12
	//for x=0..127 eval [cos(x)*120+256+256]
	for x=0..81 eval [n=floor(x/2), p=n/40, (x&1)==0 ? n*.247*256 : (asin(p*2-1)/pi*2)*60+256]
}

//data DfxData2 {	for x=0..81 eval [n=floor(x/2), p=n/40, (x&1)==0 ? cos(n)*200+256 : n*10]						}

data DfxData1 {	for x=0..81 eval [n=floor(x/2), p=n/40, (x&1)==0 ? n*.247*256 : (asin(p*2-1)/pi*2)*60+256]		}
data DfxData2 {	for x=0..81 eval [n=floor(x/2), p=n/40, (x&1)==0 ? n*.147*256 : (asin(p*2-1)/pi*2)*100+256]		}
data DfxData3 {	for x=0..81 eval [n=floor(x/2), p=n/40, (x&1)==0 ? n*.347*256 : (asin(p*2-1)/pi*2)*35+256]		}
data DfxData4 {	for x=0..81 eval [n=floor(x/2), p=n/40, (x&1)==0 ? n*.04*256 : (asin(p*2-1)/pi*2)*60+256]		}


inline dfx_init {
	// dfx2	- pitch
	// dfx3	- heading
	// dfx4	- drawing step (dot number)

	a=subframe dfx4=a
	a=dfx4 a<< c- a+dfx4 dfx3=a

	//a=SWCHB a&2 =={ a=subframe } else { a=0 } dfx2=a
	//a=SWCHB a&2 =={ dfx2-- }
	//a=frame a&0xF0 !={ dfx2-- }


	a=demo_event
	a?4 >={ dfx2-- }

	dfx4=a=0
}

inline dfx_step {
	y=dfx4
	a=(fx_data),y c+ a-dfx3 ddA=a y++
	a=(fx_data),y ddB=a
	ddD=a=dfx2
	y++ dfx4=y
	drawdot
}

data DotText {
	align 256
	charset " abcdefghijklmnopqrstuvwxyz"
	evaluator [x*9+1]
	0 0 0 0 0 0 0 0
//	|---*---*---*---|---*---*---*---
//	"the funky point ball scroller   "
//	"the funky point ball scroller   "


	"          and now the famous point ball       "
	"but have you seen it from the top          "
	"now you can        "
	"silly venture   silly venture   "
}

data DotTextWave {
	for x=0..63 eval [133-8*cos(x/64*2*pi)]
}

inline dottext_core {
	y=tmp2 y-- <0{ px0++ y=8 txtc=a=(px0),y } tmp2=y a=(txtc),y
	gp0=a gp1=a
}

func dotrender {
	wsync
	ns0=a=0x10 ns1=a
	cp0=a=0x00 cp1=a cpf=a
	ctpf=a=0x11 pf0=a=0x30
	x=64
	//a=subframe cp0=a
	tmp4=a=subframe

	a=subframe a&0x3F y=a a=DotTextWave,y
	wsync nocross { a-15 }>=0 a<< a<< a<< a<< a^0x70 hp0=a rp0=a
	a=DotTextWave,y c- a+2
	wsync nocross { a-15 }>=0 a<< a<< a<< a<< a^0x70 hp1=a rp1=a
	wsync hmove=a
//	a=subframe a>> a>> a>> px0=a
	a=subframe a&7 =={
		fx_counter++
		a=fx_counter
		a?124 =={ fx_counter=a=108 }
	}
	px0=a=fx_counter
	a=subframe a&7 a^7 tmp2=a
	px1=a=&>DotText
	y=8 txtc=a=(px0),y
	txtc+1=a=&>iA
	wsync
	dottext_core
	nocross {
	dotrender_loop:
		y=DotColors,x a=frambuff-1,x
		wsync cbg=y em1=y=0 hmclr=a { a-30 }>=0 a<< a<< a<< a^0x70 hm1=a rm1=a tmp4++
		wsync hmove=a a=frambuff-1,x !={ a|2 } em1=a
		dottext_core cp0=a=tmp4
		x--

		y=DotColors,x a=frambuff-1,x
		wsync cbg=y eb=y=0 hmclr=a { a-30 }>=0 a<< a<< a<< a^0x70 hb=a rb=a
		wsync hmove=a a=frambuff-1,x !={ a|2 } eb=a
		dottext_core
		x--
		== goto dotrender_break
		goto dotrender_loop
	dotrender_break:
	}
	wsync a=0 cbg=a em0=a=0 em1=a eb=a pf0=a gp0=a gp1=a
}


func fx_dotball {

	far fsync1 far song_player
	init_drawdot
	dfx_init
	dfxN=a=6 { dfx_step dfxN-- }!=

	fsync2
	dfxN=a=17 { dfx_step dfxN-- }!=

	far fsync3
	
	init_drawdot
	dfxN=a=18 { dfx_step dfxN-- }!=
	{ a=INTIM a?168 }!=
	dotrender

	fbclr
	//wsync cbg=a=2
	//wsync cbg=a=0

}

func seq_dotball {

	fx_counter=a=0
	dfx2=a=0
	{ 
		a=demo_event
		a?8 <{	fx_data=a=&<DfxData1	fx_data+1=a=&>DfxData1 }
		else {
			a=demo_event
			a&3
			a?2 <{
				a?1 <{ fx_data=a=&<DfxData2	fx_data+1=a=&>DfxData2	}
				else { fx_data=a=&<DfxData3	fx_data+1=a=&>DfxData3	}
			} else {
				a?3 <{ fx_data=a=&<DfxData4	fx_data+1=a=&>DfxData4	}
				else { fx_data=a=&<DfxData1	fx_data+1=a=&>DfxData1	}
			}
		}

		fx_dotball
		a=demo_event a?16
	}<
	demo_event=a=0
}
